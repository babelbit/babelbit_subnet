-- Table: public.challenge_staging

-- DROP TABLE IF EXISTS public.challenge_staging;

CREATE TABLE IF NOT EXISTS public.challenge_staging
(
    id bigint NOT NULL DEFAULT nextval('challenge_staging_id_seq'::regclass),
    file_content jsonb NOT NULL,
    file_path character varying(1024) COLLATE pg_catalog."default" NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT challenge_staging_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.challenge_staging
    OWNER to doadmin;

-- Table: public.challenges

-- DROP TABLE IF EXISTS public.challenges;

CREATE TABLE IF NOT EXISTS public.challenges
(
    id bigint NOT NULL DEFAULT nextval('challenges_id_seq'::regclass),
    staging_id bigint NOT NULL,
    challenge_uid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    dialogue_uid character varying(50) COLLATE pg_catalog."default" NOT NULL,
    utterance_number integer NOT NULL,
    utterance_text text COLLATE pg_catalog."default" NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone NOT NULL,
    submission_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT challenges_pkey PRIMARY KEY (id),
    CONSTRAINT challenges_staging_id_fkey FOREIGN KEY (staging_id)
        REFERENCES public.challenge_staging (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT challenges_utterance_number_check CHECK (utterance_number >= 0)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.challenges
    OWNER to doadmin;
-- Index: idx_challenges_challenge_uid

-- DROP INDEX IF EXISTS public.idx_challenges_challenge_uid;

CREATE INDEX IF NOT EXISTS idx_challenges_challenge_uid
    ON public.challenges USING btree
    (challenge_uid COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_challenges_dialogue_uid

-- DROP INDEX IF EXISTS public.idx_challenges_dialogue_uid;

CREATE INDEX IF NOT EXISTS idx_challenges_dialogue_uid
    ON public.challenges USING btree
    (dialogue_uid COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_challenges_staging_id

-- DROP INDEX IF EXISTS public.idx_challenges_staging_id;

CREATE INDEX IF NOT EXISTS idx_challenges_staging_id
    ON public.challenges USING btree
    (staging_id ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_challenges_utterance_number

-- DROP INDEX IF EXISTS public.idx_challenges_utterance_number;

CREATE INDEX IF NOT EXISTS idx_challenges_utterance_number
    ON public.challenges USING btree
    (utterance_number ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;

-- Table: public.json_staging

-- DROP TABLE IF EXISTS public.json_staging;

CREATE TABLE IF NOT EXISTS public.json_staging
(
    id bigint NOT NULL DEFAULT nextval('json_staging_id_seq'::regclass),
    file_content jsonb NOT NULL,
    file_path character varying(1024) COLLATE pg_catalog."default" NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT json_staging_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.json_staging
    OWNER to doadmin;


-- Table: public.miner_submission

-- DROP TABLE IF EXISTS public.miner_submission;

CREATE TABLE IF NOT EXISTS public.miner_submission
(
    id bigint NOT NULL DEFAULT nextval('miner_submission_id_seq'::regclass),
    staging_id bigint NOT NULL,
    log_file character varying(1024) COLLATE pg_catalog."default" NOT NULL,
    dialogue_uid character varying(50) COLLATE pg_catalog."default",
    utterance_number integer NOT NULL,
    ground_truth text COLLATE pg_catalog."default" NOT NULL,
    best_step integer NOT NULL,
    u_best numeric(4,3) NOT NULL,
    total_steps integer NOT NULL,
    average_u_best_early numeric(4,3) NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone NOT NULL,
    miner_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT miner_submission_pkey PRIMARY KEY (id),
    CONSTRAINT miner_submission_staging_id_fkey FOREIGN KEY (staging_id)
        REFERENCES public.json_staging (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT miner_submission_average_u_best_early_check CHECK (average_u_best_early >= 0::numeric AND average_u_best_early <= 1::numeric),
    CONSTRAINT miner_submission_best_step_check CHECK (best_step >= 0),
    CONSTRAINT miner_submission_total_steps_check CHECK (total_steps >= 1),
    CONSTRAINT miner_submission_u_best_check CHECK (u_best >= 0::numeric AND u_best <= 1::numeric),
    CONSTRAINT miner_submission_utterance_number_check CHECK (utterance_number >= 0)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.miner_submission
    OWNER to doadmin;
-- Index: idx_miner_dialogue_uid

-- DROP INDEX IF EXISTS public.idx_miner_dialogue_uid;

CREATE INDEX IF NOT EXISTS idx_miner_dialogue_uid
    ON public.miner_submission USING btree
    (dialogue_uid COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_miner_inserted_at

-- DROP INDEX IF EXISTS public.idx_miner_inserted_at;

CREATE INDEX IF NOT EXISTS idx_miner_inserted_at
    ON public.miner_submission USING btree
    (miner_inserted_at ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_miner_log_file

-- DROP INDEX IF EXISTS public.idx_miner_log_file;

CREATE INDEX IF NOT EXISTS idx_miner_log_file
    ON public.miner_submission USING btree
    (log_file COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_miner_utterance_number

-- DROP INDEX IF EXISTS public.idx_miner_utterance_number;

CREATE INDEX IF NOT EXISTS idx_miner_utterance_number
    ON public.miner_submission USING btree
    (utterance_number ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;

-- Table: public.scoring_staging

-- DROP TABLE IF EXISTS public.scoring_staging;

CREATE TABLE IF NOT EXISTS public.scoring_staging
(
    id bigint NOT NULL DEFAULT nextval('scoring_staging_id_seq'::regclass),
    file_content jsonb NOT NULL,
    file_path character varying(1024) COLLATE pg_catalog."default" NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT scoring_staging_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.scoring_staging
    OWNER to doadmin;


-- Table: public.scoring_submissions

-- DROP TABLE IF EXISTS public.scoring_submissions;

CREATE TABLE IF NOT EXISTS public.scoring_submissions
(
    id bigint NOT NULL DEFAULT nextval('scoring_submissions_id_seq'::regclass),
    scoring_staging_id bigint NOT NULL,
    challenge_uid character varying(50) COLLATE pg_catalog."default",
    dialogue_uid character varying(50) COLLATE pg_catalog."default",
    miner_uid integer,
    miner_hotkey character varying(50) COLLATE pg_catalog."default",
    utterance_number integer NOT NULL,
    ground_truth text COLLATE pg_catalog."default" NOT NULL,
    best_step integer NOT NULL,
    u_best numeric(4,3) NOT NULL,
    total_steps integer NOT NULL,
    average_u_best_early numeric(4,3) NOT NULL,
    json_created_at timestamp without time zone NOT NULL,
    staging_inserted_at timestamp without time zone NOT NULL,
    submission_inserted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT scoring_submissions_pkey PRIMARY KEY (id),
    CONSTRAINT scoring_submissions_scoring_staging_id_fkey FOREIGN KEY (scoring_staging_id)
        REFERENCES public.scoring_staging (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT scoring_submissions_average_u_best_early_check CHECK (average_u_best_early >= 0::numeric AND average_u_best_early <= 1::numeric),
    CONSTRAINT scoring_submissions_best_step_check CHECK (best_step >= 0),
    CONSTRAINT scoring_submissions_miner_uid_check CHECK (miner_uid >= 0 AND miner_uid <= 9999),
    CONSTRAINT scoring_submissions_total_steps_check CHECK (total_steps >= 1),
    CONSTRAINT scoring_submissions_u_best_check CHECK (u_best >= 0::numeric AND u_best <= 1::numeric),
    CONSTRAINT scoring_submissions_utterance_number_check CHECK (utterance_number >= 0)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.scoring_submissions
    OWNER to doadmin;
-- Index: idx_scoring_submissions_challenge_uid

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_challenge_uid;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_challenge_uid
    ON public.scoring_submissions USING btree
    (challenge_uid COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_scoring_submissions_dialogue_uid

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_dialogue_uid;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_dialogue_uid
    ON public.scoring_submissions USING btree
    (dialogue_uid COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_scoring_submissions_miner_hotkey

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_miner_hotkey;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_miner_hotkey
    ON public.scoring_submissions USING btree
    (miner_hotkey COLLATE pg_catalog."default" ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_scoring_submissions_miner_uid

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_miner_uid;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_miner_uid
    ON public.scoring_submissions USING btree
    (miner_uid ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_scoring_submissions_staging_id

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_staging_id;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_staging_id
    ON public.scoring_submissions USING btree
    (scoring_staging_id ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
-- Index: idx_scoring_submissions_utterance_number

-- DROP INDEX IF EXISTS public.idx_scoring_submissions_utterance_number;

CREATE INDEX IF NOT EXISTS idx_scoring_submissions_utterance_number
    ON public.scoring_submissions USING btree
    (utterance_number ASC NULLS LAST)
    WITH (fillfactor=100, deduplicate_items=True)
    TABLESPACE pg_default;
